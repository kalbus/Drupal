<?php

namespace Drupal\bloques_de_prueba\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Provides a 'InfoCustomBlock' block.
 *
 * @Block(
 *  id = "info_custom_block",
 *  admin_label = @Translation("Info Custom"),
 * )
 */
class InfoCustomBlock extends BlockBase {

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {//editamos esto
    return [
      //aqui ponemos los nombres de los campos que creamos en los formularios
      'content_block' => 'Agregar algo en esta parte',
        'color' => '',
        'rellenar_color' => ''
          ] + parent::defaultConfiguration();
  }

  /**
   * {@inheritdoc}
   */
  public function blockForm($form, FormStateInterface $form_state) {
    $form['content_block'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Ingrese el contenido'),
    '#description' => $this->t('La info que quiere que se muestre'),
      '#default_value' => $this->configuration['content_block'],
      '#weight' => '0',
    ];

    //editamos esto
    $form['color'] = [
      //siempre lleva un tipo
      '#type' => 'textfield',
      '#title' => $this->t('Ingrese el color en HEX'),
      '#default_value'  => $this->configuration['color'],//obtener valor del campo, le ponemos adentro el nombre del form
      '#size' => 7,//7 campos por que el hexa tiene 6 + el # son 7
      '#maxlength' => 7,
      '#weight' => '0'//le cambia la posicion es como si fuera un zindex
    ];

    $form['rellenar_color'] = [
      '#type' => 'checkbox',
      '#title' => $this
        ->t('Rellenar contenido'),
      '#default_value'  => $this->configuration['rellenar_color'],
      '#weight' => '0'
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    $this->configuration['content_block'] = $form_state->getValue('content_block');
    $this->configuration['color'] = $form_state->getValue('color');
    $this->configuration['rellenar_color'] = $form_state->getValue('rellenar_color');
    //vamos a crear otro para que almacene el color
    //form_state tiene la info del formulario
  }

  public function blockValidate($form, FormStateInterface $form_state)
  {
    parent::blockValidate($form, $form_state); // TODO: Change the autogenerated stub
    //ahora vamos a obtener el valor que viene en el campo color

    //form_state es de donde viene la info que el usuario ingres[o
    $color = $form_state -> getValue('color');//esto almacena lo que digit[o el usuario en color
    if(strlen($color) === 0){
      //si es cero es que viene vacio
      $form_state -> setErrorByName('color', $this->t('No se han ingresado datos'));//agrega un error por el nombre del campo
    }
    //verificar si es un valor hexadecimal
    //vamos a usar patrones para eso
    if(!preg_match('/^#([a-f0-9]{6})$/iD', strtolower($color))){
      $form_state -> setErrorByName('color', $this->t('Debe ingresar un valor Hex valido(#ffffff)'));
    }//el segundo es el valor que queremos comparar
  }

  /**
   * {@inheritdoc}
   */

  public function build() {
    $build = [];
    $build['info_custom_block_content_block']= [//cambiamos esto
      '#type' => 'inline_template',
      '#template' => '<p>{{ contenido}}</p>',//ponemos adentro nombre de la variable que queremos imprimir
      '#context' => [
        //asociamos el contenido con el valor que quermos imprimir
        'contenido' => $this -> configuration['content_block'],
      ]
    ] ;

    //esta es otra forma de renderizar elementos
    $color = $this->configuration['color'];
    $build['info_custom_block_color'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => $this->t('Este es el color @color',
        ['@color' => $color]),
      '#attributes' => [
        'style' => "color: $color"
    ]
    ];

    //rellenar
    $rellenar_color = $this->configuration['rellenar_color'];
    $cssColor = $rellenar_color ? "background: $color" : "color: $color";
    $build['info_custom_block_rellenar_color'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => $this->t('Este es el texto rellenado @color',
        ['@color' => $color]),
      '#attributes' => [
        'style' => $cssColor
      ]
    ];

    return $build;
  }

}
